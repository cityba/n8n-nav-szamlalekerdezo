"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTaskManager = void 0;
const backend_common_1 = require("@n8n/backend-common");
const config_1 = require("@n8n/config");
const constants_1 = require("@n8n/constants");
const di_1 = require("@n8n/di");
const cron_1 = require("cron");
const instance_settings_1 = require("../instance-settings");
let ScheduledTaskManager = class ScheduledTaskManager {
    constructor(instanceSettings, logger, config) {
        this.instanceSettings = instanceSettings;
        this.logger = logger;
        this.config = config;
        this.cronMap = new Map();
        this.logger = this.logger.scoped('cron');
        if (this.config.activeInterval === 0)
            return;
        this.logInterval = setInterval(() => this.logActiveCrons(), this.config.activeInterval * constants_1.Time.minutes.toMilliseconds);
    }
    logActiveCrons() {
        const activeCrons = {};
        for (const [workflowId, cronJobs] of this.cronMap) {
            activeCrons[`workflow-${workflowId}`] = cronJobs.map(({ displayableCron }) => displayableCron);
        }
        if (Object.keys(activeCrons).length === 0)
            return;
        this.logger.debug('Currently active crons', { activeCrons });
    }
    registerCron(workflow, { expression, recurrence }, onTick) {
        const recurrenceStr = recurrence?.activated
            ? `every ${recurrence.intervalSize} ${recurrence.typeInterval}`
            : undefined;
        const displayableCron = recurrenceStr ? `${expression} (${recurrenceStr})` : expression;
        const cronJob = new cron_1.CronJob(expression, () => {
            if (this.instanceSettings.isLeader) {
                this.logger.debug('Executing cron for workflow', {
                    workflowId: workflow.id,
                    cron: displayableCron,
                    instanceRole: this.instanceSettings.instanceRole,
                });
                onTick();
            }
        }, undefined, true, workflow.timezone);
        const workflowCronEntries = this.cronMap.get(workflow.id);
        const cronEntry = { job: cronJob, displayableCron };
        if (workflowCronEntries) {
            workflowCronEntries.push(cronEntry);
        }
        else {
            this.cronMap.set(workflow.id, [cronEntry]);
        }
        this.logger.debug('Registered cron for workflow', {
            workflowId: workflow.id,
            cron: displayableCron,
            instanceRole: this.instanceSettings.instanceRole,
        });
    }
    deregisterCrons(workflowId) {
        const cronJobs = this.cronMap.get(workflowId) ?? [];
        if (cronJobs.length === 0)
            return;
        const crons = [];
        while (cronJobs.length) {
            const cronEntry = cronJobs.pop();
            if (cronEntry) {
                crons.push(cronEntry.displayableCron);
                cronEntry.job.stop();
            }
        }
        this.cronMap.delete(workflowId);
        this.logger.info('Deregistered all crons for workflow', {
            workflowId,
            crons,
            instanceRole: this.instanceSettings.instanceRole,
        });
    }
    deregisterAllCrons() {
        for (const workflowId of this.cronMap.keys()) {
            this.deregisterCrons(workflowId);
        }
        if (this.logInterval)
            clearInterval(this.logInterval);
    }
};
exports.ScheduledTaskManager = ScheduledTaskManager;
exports.ScheduledTaskManager = ScheduledTaskManager = __decorate([
    (0, di_1.Service)(),
    __metadata("design:paramtypes", [instance_settings_1.InstanceSettings,
        backend_common_1.Logger,
        config_1.CronLoggingConfig])
], ScheduledTaskManager);
//# sourceMappingURL=scheduled-task-manager.js.map